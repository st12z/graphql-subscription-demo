// analyze/compress.js
import fs from "fs";
import path from "path";
import Table from "cli-table3";

const COMPRESS_FILE = path.resolve("compression_benchmark.json");

/**
 * ƒê·ªçc d·ªØ li·ªáu t·ª´ file n√©n
 */
function readCompressionData() {
  if (!fs.existsSync(COMPRESS_FILE)) {
    console.error("‚ùå Kh√¥ng t√¨m th·∫•y file compression_benchmark.json");
    process.exit(1);
  }

  const raw = fs.readFileSync(COMPRESS_FILE, "utf8");
  const data = JSON.parse(raw);

  return data;
}

/**
 * Hi·ªÉn th·ªã b·∫£ng so s√°nh n√©n vs kh√¥ng n√©n
 */
function showCompressionTable(data) {
  const table = new Table({
    head: [
      "Ch·∫ø ƒë·ªô",
      "K√≠ch th∆∞·ªõc (B)",
      "Th·ªùi gian n√©n (ms)",
      "Th·ªùi gian gi·∫£i n√©n (ms)",
      "T·ªïng th·ªùi gian (ms)",
      "Ti·∫øt ki·ªám (%)",
    ],
    colAligns: ["center", "right", "right", "right", "right", "right"],
    style: { head: ["green"], border: [] },
  });

  const originalSize = data.no_compression.size_bytes;
  const compressedSize = data.with_compression.compressed_size_bytes;
  const savedPercent = (
    ((originalSize - compressedSize) / originalSize) *
    100
  ).toFixed(2);

  table.push(
    [
      "Kh√¥ng n√©n",
      originalSize,
      "‚Äî",
      "‚Äî",
      data.no_compression.process_time_ms.toFixed(3),
      "0%",
    ],
    [
      "C√≥ n√©n",
      compressedSize,
      data.with_compression.compression_time_ms.toFixed(3),
      data.with_compression.decompression_time_ms.toFixed(3),
      data.with_compression.total_process_time_ms.toFixed(3),
      `${savedPercent}%`,
    ]
  );

  console.log("\nüìä So s√°nh N√©n vs Kh√¥ng N√©n");
  console.log(table.toString());
}

/**
 * Ph√¢n t√≠ch & ƒë√°nh gi√° k·∫øt qu·∫£
 */
function analyze(data) {
  const sizeBefore = data.no_compression.size_bytes;
  const sizeAfter = data.with_compression.compressed_size_bytes;
  const timeBefore = data.no_compression.process_time_ms;
  const timeAfter = data.with_compression.total_process_time_ms;

  console.log("\nüß† Ph√¢n t√≠ch nhanh:");
  console.log(`- K√≠ch th∆∞·ªõc g·ªëc: ${sizeBefore}B ‚Üí sau n√©n: ${sizeAfter}B`);
  console.log(
    `- Gi·∫£m dung l∆∞·ª£ng: ${(100 * (sizeBefore - sizeAfter) / sizeBefore).toFixed(
      2
    )}%`
  );
  console.log(
    `- Th·ªùi gian x·ª≠ l√Ω kh√¥ng n√©n: ${timeBefore.toFixed(
      3
    )} ms, c√≥ n√©n (n√©n + gi·∫£i n√©n): ${timeAfter.toFixed(3)} ms`
  );

  if (timeAfter > timeBefore) {
    console.log(
      `‚ö†Ô∏è N√©n gi√∫p gi·∫£m dung l∆∞·ª£ng nh∆∞ng **t·ªën th√™m th·ªùi gian x·ª≠ l√Ω**, ph√π h·ª£p khi g·ª≠i qua m·∫°ng.`
    );
  } else {
    console.log(`‚úÖ N√©n v·ª´a nhanh v·ª´a ti·∫øt ki·ªám dung l∆∞·ª£ng (tr∆∞·ªùng h·ª£p hi·∫øm).`);
  }
}

function main() {
  const data = readCompressionData();
  showCompressionTable(data);
  analyze(data);
}

main();
